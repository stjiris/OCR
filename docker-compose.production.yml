volumes:
  elasticsearch_data: {}
  files_data: {}
  configs_data: {}

services:
  server:
    build:
      context: ./server
      dockerfile: ../compose/server/Dockerfile
    image: ocr-server
    env_file: "server/.env"
    environment:
      FLASK_APP: app
      FLASK_ENV: production
      FLASK_DEBUG: 0
      PYTHONUNBUFFERED: true
      PYTHONDONTWRITEBYTECODE : true
    command: /app/start
    expose:
      - "5001"  # exposed only to other services
    depends_on:
      elasticsearch:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    volumes:
      - files_data:/app/_files
      - configs_data:/app/_configs
    restart: unless-stopped
    networks:
      - internal-network

  worker:
    build:
      context: ./server
      dockerfile: ../compose/worker/Dockerfile
    image: ocr-worker
    env_file: "server/.env"
    hostname: "${HOSTNAME:-$COMPUTERNAME}"  # set same hostname as host machine; try UNIX, else Windows
    environment:
      C_FORCE_ROOT: true
      PYTHONUNBUFFERED: true
      PYTHONDONTWRITEBYTECODE : true
    command: celery -A celery_app.celery worker --beat --scheduler redbeat.RedBeatScheduler --loglevel=debug --without-gossip --without-mingle --without-heartbeat -Ofair -E --concurrency=8 --hostname=worker1@%h -P prefork
    healthcheck:
        test: celery inspect ping -d worker1@$$HOSTNAME
        interval: 10s
        timeout: 10s
        retries: 3
        start_period: 10s
    volumes:
      - files_data:/app/_files
      - configs_data:/app/_configs
    depends_on:
      redis:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    networks:
      - internal-network
      - external-network

  flower:
    image: ocr-worker
    env_file: "server/.env"
    environment:
      FLOWER_UNAUTHENTICATED_API: true  # authentication managed through Flask
    command: bash -c "celery -A celery_app.celery flower --port=5050 --url_prefix=$$APP_BASENAME\"/admin/flower\" --enable_events=False"
    expose:
      - "5050"  # exposed only to other services
    depends_on:
      worker:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    networks:
      - internal-network

  redis:
    image: redis:7.2
    expose:
      - "6379"  # exposed only to other services
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s
    volumes:
      - files_data:/app/_files
    restart: unless-stopped
    networks:
      - internal-network

  nginx:
    build:
      context: .
      dockerfile: ./compose/nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - server
    volumes:
      - files_data:/usr/share/nginx/html/files
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx
      CLIENT_MAX_BODY_SIZE: 2G
    restart: unless-stopped
    networks:
      - internal-network
      - external-network

  elasticsearch:
    build:
      context: ./compose/elasticsearch
      dockerfile: Dockerfile
    expose:
      - "9200"  # exposed only to other services
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      xpack.security.enabled: false
      discovery.type: single-node
    healthcheck:
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:9200
      interval: 10s
      timeout: 30s
      retries: 15
      start_period: 10s
    restart: unless-stopped
    networks:
      - internal-network

networks:
  internal-network:
    driver: bridge
    internal: true
  external-network:
    driver: bridge
